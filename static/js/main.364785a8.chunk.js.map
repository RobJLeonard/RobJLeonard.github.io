{"version":3,"sources":["registerServiceWorker.ts","constants/index.tsx","containers/HomePage/constants.tsx","containers/HomePage/HomePageComponent.tsx","containers/HomePage/HomePageContainer.tsx","containers/HomePage/actions.tsx","index.tsx","reducers/index.tsx"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","INCREMENT_ENTHUSIASM","DECREMENT_ENTHUSIASM","GITHUB_SIGNIN","_super","HomePage","_this","apply","this","arguments","onClick","props","onPressButton","tslib_es6","prototype","componentDidMount","render","react","Helmet","name","content","className","href","title","HomePageContainer","Object","es","_a","OAuthToken","dispatch","type","HomePageComponent","store","redux","action","enthusiasmLevel","languageName","react_dom","document","getElementById","URL","toString","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"gMAWMA,SAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,4DAyCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WAClCD,IACFA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAOvBC,MAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,gBCrFpDC,EAAuB,uBAIvBC,EAAuB,uBCJ7B,IAGMC,EAAgB,sDCU7B,SAAAC,GAAA,SAAAC,IAAA,IAAAC,EAAA,OAAAF,KAAAG,MAAAC,KAAAC,YAAAD,YAQIF,EAAAI,QAAU,WACLJ,EAAKK,MAAMC,gBACZf,QAAQC,IAAI,kBACZQ,EAAKK,MAAMC,oBA2BjB,OAtCoCC,EAAA,EAAAR,EAAAD,GAI3BC,EAAAS,UAAAC,kBAAP,aAWOV,EAAAS,UAAAE,OAAP,WACE,OACEC,EAAA,6BACEA,EAAA,cAACC,EAAA,OAAM,KACLD,EAAA,wCACAA,EAAA,sBAAME,KAAK,cAAcC,QAAQ,4BAEnCH,EAAA,qBAAKI,UAAU,aACbJ,EAAA,yBAASI,UAAU,YACjBJ,EAAA,wEACAA,EAAA,yDAAkCA,EAAA,sCAAiE,+CACnGA,EAAA,mBAAGK,KAAK,4FAA0F,yBAEpGL,EAAA,6BACEA,EAAA,wBACAM,MAAO,eACPb,QAASF,KAAKE,cAO1BL,EAtCF,CAAsCY,EAAA,WCSvB,IAAAO,EAAAC,OAAAC,EAAA,EAAAD,CAdT,SAA0BE,GAC5B,MAAO,CACHC,WAF0BD,EAAAC,aAM5B,SAA6BC,GAC/B,MAAO,CACHjB,cAAe,WAAM,OAAAiB,ECoBpB,CACLC,KAAM3B,ODfK,CAA6C4B,GENtDC,EAAQP,OAAAQ,EAAA,EAAAR,CCXR,SAAqB9B,EAAoBuC,GAC7C,OAAQA,EAAOJ,MACb,KAAK7B,EACH,OAAAY,EAAA,KAAYlB,EAAK,CAAEwC,gBAAiBxC,EAAMwC,gBAAkB,IAC9D,KAAKjC,EACH,OAAAW,EAAA,KAAYlB,EAAK,CAAEwC,gBAAiBxC,EAAMwC,gBAAkB,IAEhE,OAAOxC,GDI+D,CACtEwC,gBAAiB,EACjBC,aAAc,WAIhBC,EAAA,OACEpB,EAAA,cAACS,EAAA,EAAQ,CAACM,MAAOA,GACff,EAAA,cAACO,EAAQ,OAEXc,SAASC,eAAe,SNLZ,WACZ,GAA6C,kBAAmBrD,UAAW,CAMzE,GAJkB,IAAIsD,IACpB,GACA5D,OAAOC,SAAS4D,YAEJC,SAAW9D,OAAOC,SAAS6D,OAIvC,OAGF9D,OAAO+D,iBAAiB,OAAQ,WAC9B,IAAM1D,EAAiC,qBAEnCP,GAmDV,SAAiCO,GAE/B2D,MAAM3D,GACHI,KAAK,SAAAwD,GAGkB,MAApBA,EAASC,SACwD,IAAjED,EAASE,QAAQC,IAAI,gBAAiBC,QAAQ,cAG9C/D,UAAUC,cAAc+D,MAAM7D,KAAK,SAAAC,GACjCA,EAAa6D,aAAa9D,KAAK,WAC7BT,OAAOC,SAASuE,aAKpBpE,EAAgBC,KAGnBc,MAAM,WACLF,QAAQC,IACN,mEAvEAuD,CAAwBpE,GAIxBC,UAAUC,cAAc+D,MAAM7D,KAAK,WACjCQ,QAAQC,IACN,+GAMJd,EAAgBC,MMxBxBG","file":"static/js/main.364785a8.chunk.js","sourcesContent":["// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const INCREMENT_ENTHUSIASM = 'INCREMENT_ENTHUSIASM';\r\nexport type INCREMENT_ENTHUSIASM = typeof INCREMENT_ENTHUSIASM;\r\n\r\n\r\nexport const DECREMENT_ENTHUSIASM = 'DECREMENT_ENTHUSIASM';\r\nexport type DECREMENT_ENTHUSIASM = typeof DECREMENT_ENTHUSIASM;\r\n\r\nexport const CHANGE_USERNAME = 'git_access/HomePage/CHANGE_USERNAME';\r\nexport type CHANGE_USERNAME = typeof CHANGE_USERNAME;","export const CHANGE_USERNAME = 'git_access/src/HomePage/CHANGE_USERNAME';\r\nexport type CHANGE_USERNAME = typeof CHANGE_USERNAME;\r\n\r\nexport const GITHUB_SIGNIN = 'git_access/src/HomePage/GITHUB_SIGNIN';\r\nexport type GITHUB_SIGNIN = typeof GITHUB_SIGNIN;","import * as React from 'react';\r\nimport { Helmet } from 'react-helmet';\r\n\r\n\r\n\r\nexport interface IHomePageProps {\r\n  onPressButton: () => void;\r\n}\r\n\r\ninterface IHomePageState {\r\n  OAuthToken: string;\r\n}\r\n\r\nexport default class HomePage extends React.Component<IHomePageProps, IHomePageState> { // eslint-disable-line react/prefer-stateless-function\r\n    /**\r\n     * when initial state username is not null, submit the form to load repos\r\n     */\r\n    public componentDidMount() {\r\n      \r\n    }\r\n\r\n    onClick = () => {\r\n      if(this.props.onPressButton){\r\n        console.log('button pressed');\r\n        this.props.onPressButton();\r\n      }\r\n    }\r\n  \r\n    public render() {  \r\n      return (\r\n        <article>\r\n          <Helmet>\r\n            <title>Home Page</title>\r\n            <meta name=\"description\" content=\"The homepage of my app\" />\r\n          </Helmet>\r\n          <div className=\"home-page\">\r\n            <section className=\"centered\">\r\n              <h2>Here you can enter connect to the Github API</h2>\r\n              <p>This project was created using <i>React-Redux</i> for component creation on state managemnet</p>\r\n              <a href=\"https://github.com/login/oauth/authorize?scope=user:email&client_id=4cfba37be95601c9e08a\">Click here to begin!</a>\r\n            </section>\r\n            <section>\r\n              <button \r\n              title={'GitHub Login'}\r\n              onClick={this.onClick}\r\n              />\r\n            </section>\r\n          </div>\r\n        </article>\r\n      );\r\n    }\r\n  }","import { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\n\r\nimport * as actions from './actions';\r\nimport HomePage from './HomePageComponent';\r\nimport { IStoreState } from '../../types/index';\r\n\r\n\r\nexport function mapStateToProps({ OAuthToken }: IStoreState) {\r\n    return {\r\n        OAuthToken : OAuthToken\r\n    }\r\n}\r\n\r\nexport function mapDispatchToProps(dispatch: Dispatch<actions.HomePageActions>) {\r\n    return {\r\n        onPressButton: () => dispatch(actions.githubSignIn())\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HomePage);","import * as constants from './constants';\r\n\r\nexport interface IChangeUsername {\r\n  type: constants.CHANGE_USERNAME;\r\n  payload: string;\r\n}\r\n\r\nexport interface IGithubSignIn {\r\n  type: constants.GITHUB_SIGNIN;\r\n}\r\n\r\n\r\nexport type HomePageActions = IChangeUsername | IGithubSignIn;\r\n\r\n/**\r\n * Changes the input field of the form\r\n *\r\n * @param  {name} name The new text of the input field\r\n *\r\n * @return {object}    An action object with a type of CHANGE_USERNAME\r\n */\r\nexport function changeUsername(name: string): IChangeUsername {\r\n  return {\r\n    payload: name,\r\n    type: constants.CHANGE_USERNAME\r\n  };\r\n}\r\n\r\n/**\r\n * Sends a request for github OAuth\r\n *\r\n * @param  {name} name The new text of the input field\r\n *\r\n * @return {object}    An action object with a type of CHANGE_USERNAME\r\n */\r\nexport function githubSignIn(): IGithubSignIn {\r\n  return {\r\n    type: constants.GITHUB_SIGNIN\r\n  };\r\n}","import * as React from 'react';\nimport { Action, createStore } from 'redux';\n\nimport * as ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport './index.css';\nimport registerServiceWorker from './registerServiceWorker';\n\nimport { enthusiasm } from './reducers/index';\nimport { IStoreState } from './types/index';\nimport HomePage from './containers/HomePage/HomePageContainer';\n\n\n\n\nconst store = createStore<IStoreState, Action<any>, {}, {}>(enthusiasm, {\n  enthusiasmLevel: 1,\n  languageName: 'Robert',\n});\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <HomePage />\n  </Provider>,\n  document.getElementById('root') as HTMLElement\n);\nregisterServiceWorker();\n","import { EnthusiasmAction } from '../actions';\r\nimport { DECREMENT_ENTHUSIASM, INCREMENT_ENTHUSIASM } from '../constants/index';\r\nimport { IStoreState } from '../types/index';\r\n\r\n\r\nexport function enthusiasm(state: IStoreState, action: EnthusiasmAction): IStoreState {\r\n  switch (action.type) {\r\n    case INCREMENT_ENTHUSIASM:\r\n      return { ...state, enthusiasmLevel: state.enthusiasmLevel + 1 };\r\n    case DECREMENT_ENTHUSIASM:\r\n      return { ...state, enthusiasmLevel: state.enthusiasmLevel - 1 };\r\n  }\r\n  return state;\r\n}"],"sourceRoot":""}