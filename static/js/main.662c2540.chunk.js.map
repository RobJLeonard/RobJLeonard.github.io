{"version":3,"sources":["registerServiceWorker.ts","containers/HomePage/constants.tsx","containers/HomePage/reducers.tsx","containers/HomePage/actions.tsx","containers/HomePage/HomePageComponent.tsx","containers/HomePage/HomePageContainer.tsx","App.tsx","index.tsx"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","CHANGE_USERNAME","GITHUB_SIGNIN","GITHUB_METRICS","GITHUB_SET_AUTH","initialState","Object","immutable_es","OAuthToken","reducers","action","type","tslib_es6","username","payload","replace","set","token","CLIENT_ID","HOME_URL","REDIRECT_URI","HomePageComponent_initialState","loading","authenticated","userInfo","userName","userAvatar","_super","HomePage","props","_this","call","this","prototype","componentDidMount","code","url_url","href","query","setState","fetch","response","json","_a","undefined","getUserInfo","githubStoreAuth","access_token","method","data","avatar_url","name","render","button","react","className","title","onClick","onPressGitSignIn","onPressGitMetrics","Helmet","content","src","alt","HomePageContainer","es","dispatch","HomePageComponent","Metrics","About","Navigation","Link","to","src_App","BrowserRouter","Route","exact","path","component","store","redux","currentUsername","react_dom","document","getElementById","URL","toString","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.662c2540.chunk.js","sourcesContent":["// tslint:disable:no-console\r\n// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the 'N+1' visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL!,\r\n      window.location.toString()\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker) {\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the old content will have been purged and\r\n                // the fresh content will have been added to the cache.\r\n                // It's the perfect time to display a 'New content is\r\n                // available; please refresh.' message in your web app.\r\n                console.log('New content is available; please refresh.');\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // 'Content is cached for offline use.' message.\r\n                console.log('Content is cached for offline use.');\r\n              }\r\n            }\r\n          };\r\n        }\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type')!.indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","export const CHANGE_USERNAME = 'git_access/src/HomePage/CHANGE_USERNAME';\r\nexport type CHANGE_USERNAME = typeof CHANGE_USERNAME;\r\n\r\nexport const GITHUB_SIGNIN = 'git_access/src/HomePage/GITHUB_SIGNIN';\r\nexport type GITHUB_SIGNIN = typeof GITHUB_SIGNIN;\r\n\r\nexport const GITHUB_METRICS = 'git_access/src/HomePage/GITHUB_METRICS';\r\nexport type GITHUB_METRICS = typeof GITHUB_METRICS;\r\n\r\nexport const GITHUB_SET_AUTH = 'git_access/src/HomePage/GITHUB_SET_AUTH';\r\nexport type GITHUB_SET_AUTH = typeof GITHUB_SET_AUTH;","/*\r\n * HomeReducer\r\n *\r\n * The reducer takes care of our data. Using actions, we can change our\r\n * application state.\r\n * To add a new action, add it to the switch statement in the reducer function\r\n *\r\n * Example:\r\n * case YOUR_ACTION_CONSTANT:\r\n *   return state.set('yourStateVariable', true);\r\n */\r\nimport { fromJS } from 'immutable';\r\n\r\nimport { HomePageActions } from './actions';\r\nimport { CHANGE_USERNAME, GITHUB_SIGNIN, GITHUB_SET_AUTH } from './constants';\r\n\r\n\r\nconst initialState = fromJS({\r\n    OAuthToken: ''\r\n});\r\n\r\nfunction homeReducer(state: any = initialState, action: HomePageActions) {\r\n    switch (action.type) {\r\n        case CHANGE_USERNAME:\r\n            // Delete prefixed '@' from the github username\r\n            return { ...state, username: action.payload.replace(/@/gi, '') };\r\n        case GITHUB_SIGNIN:\r\n            // Send user to github sign in page and recieve token\r\n            console.log(\"Reducer\");\r\n            return { ...state };\r\n        case GITHUB_SET_AUTH:\r\n            // Send user to github sign in page and recieve token\r\n            console.log(\"Reducer\");\r\n            return state.set('OAuthToken', action.token);\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default homeReducer;","import * as constants from './constants';\r\n\r\nexport interface IChangeUsername {\r\n  type: constants.CHANGE_USERNAME;\r\n  payload: string;\r\n}\r\n\r\nexport interface IGithubSignIn {\r\n  type: constants.GITHUB_SIGNIN;\r\n}\r\n\r\nexport interface IGithubMetrics {\r\n  type: constants.GITHUB_METRICS;\r\n}\r\n\r\nexport interface IGithubSetAuth {\r\n  type: constants.GITHUB_SET_AUTH;\r\n  token: string;\r\n}\r\n\r\n\r\nexport type HomePageActions = IChangeUsername | IGithubSignIn | IGithubMetrics | IGithubSetAuth;\r\n\r\n/**\r\n * Changes the input field of the form\r\n *\r\n * @param  {name} name The new text of the input field\r\n *\r\n * @return {object}    An action object with a type of CHANGE_USERNAME\r\n */\r\nexport function changeUsername(name: string): IChangeUsername {\r\n  return {\r\n    payload: name,\r\n    type: constants.CHANGE_USERNAME\r\n  };\r\n}\r\n\r\nconst CLIENT_ID = \"4cfba37be95601c9e08a\";\r\n// DEVELOPMENT ADDRESS\r\n// const HOME_URL = \"http://localhost:3000\";\r\n// const REDIRECT_URI = \"http://localhost:3000/\";\r\n\r\n// PRODUCTION ADDRESS\r\nconst HOME_URL = 'https://robjleonard.github.io/';\r\nconst REDIRECT_URI = 'https://robjleonard.github.io/';\r\n\r\n\r\n/**\r\n * Sends a request for github OAuth\r\n *\r\n * @param  {name} name The new text of the input field\r\n *\r\n * @return {object}    An action object with a type of CHANGE_USERNAME\r\n */\r\nexport function githubSignIn(): IGithubSignIn {\r\n  console.log(\"Action\");\r\n  window.location.href = ('https://github.com/login/oauth/authorize?scope=user:email&client_id=' + CLIENT_ID + '&redirect_uri=' + REDIRECT_URI);\r\n\r\n  return {\r\n    type: constants.GITHUB_SIGNIN,\r\n  };\r\n}\r\n\r\n/**\r\n * Store an OAuth token in the redux store\r\n *\r\n *\r\n * @return {object}    An action object with a type of GITHUB_CHECK_AUTH\r\n */\r\nexport function githubStoreAuth(token:string): IGithubSetAuth {\r\n  console.log(\"Action\");\r\n\r\n  return {\r\n    type: constants.GITHUB_SET_AUTH,\r\n    token\r\n  };\r\n}\r\n\r\n/**\r\n* Sends the user to the metrics page\r\n*\r\n* @return {object}    An action object with a type of CHANGE_USERNAME\r\n*/\r\nexport function githubMetrics(): IGithubMetrics {\r\n  console.log(\"Action\");\r\n  window.location.href = (HOME_URL + '/metrics');\r\n\r\n  return {\r\n    type: constants.GITHUB_METRICS,\r\n  };\r\n}\r\n\r\n","import * as React from 'react';\r\nimport { Helmet } from 'react-helmet';\r\nimport * as Url from 'url';\r\n\r\nimport './style.css';\r\n\r\nexport interface IHomePageProps {\r\n  onPressGitSignIn: () => void;\r\n  onPressGitMetrics: () => void;\r\n  githubStoreAuth: (token: string) => void;\r\n}\r\n\r\ninterface IHomePageState {\r\n  error: boolean;\r\n  loading: boolean;\r\n  authenticated: boolean;\r\n  OAuthToken: string;\r\n  userInfo: any\r\n  userName: string,\r\n  userAvatar: string;\r\n}\r\n\r\nconst initialState: IHomePageState = {\r\n  error: false,\r\n  loading: false,\r\n  authenticated: false,\r\n  OAuthToken: '',\r\n  userInfo: null,\r\n  userName: '',\r\n  userAvatar: ''\r\n}\r\n\r\nexport default class HomePage extends React.Component<IHomePageProps, IHomePageState> { // eslint-disable-line react/prefer-stateless-function\r\n\r\n  constructor(props: IHomePageProps) {\r\n    super(props)\r\n    this.state = initialState;\r\n  }\r\n\r\n  public componentDidMount() {\r\n\r\n    let url = Url.parse(window.location.href, true);\r\n    let queryData = url.query;\r\n    const code = queryData.code;\r\n    if (code) {\r\n      this.setState({ loading: true });\r\n      console.log('code :' + code);\r\n      fetch('https://git-access-trinity.herokuapp.com/authenticate/' + code)\r\n        .then((response) => { return response.json() })\r\n        .then(({ token }) => {\r\n          if (token === undefined) {\r\n            console.error(\"Error: no access token recieved. Likely caused by old code used.\")\r\n            this.setState({\r\n              loading: false,\r\n              error: true\r\n            })\r\n          }\r\n          else\r\n            console.log(\"access_token : \" + token);\r\n          this.setState({\r\n            OAuthToken: token,\r\n            loading: false,\r\n            authenticated: true\r\n          });\r\n          this.getUserInfo(token);\r\n          this.props.githubStoreAuth;\r\n        });\r\n\r\n    }\r\n  }\r\n\r\n  public getUserInfo(access_token: string) {\r\n    this.setState({ loading: true });\r\n\r\n    if (access_token !== undefined)\r\n      fetch('https://api.github.com/user?access_token=' + access_token, { method: 'get' })\r\n        .then((response) => {\r\n          let data = response.json();\r\n          this.setState({ userInfo: data });\r\n          return data;\r\n        })\r\n        .then(({ avatar_url, name }) => {\r\n          if (avatar_url === undefined) {\r\n            console.error(\"Error: problem occurred parsing user data.\")\r\n            this.setState({\r\n              loading: false,\r\n              error: true\r\n            })\r\n          }\r\n          else {\r\n            this.setState({\r\n              userAvatar: avatar_url,\r\n              userName: name,\r\n              loading: false,\r\n\r\n            });\r\n          }\r\n        });\r\n  }\r\n\r\n  public render() {\r\n\r\n    let button;\r\n    if (this.state.authenticated === false) {\r\n      button = <button\r\n        className={\"Git-Access-button\"}\r\n        title={'GitHub Login'}\r\n        onClick={this.props.onPressGitSignIn}\r\n      > Click here to authorize</button>\r\n    }\r\n    else {\r\n      button = <button\r\n        className={\"Continue to Github Metrics\"}\r\n        title={'GitHub Metrics'}\r\n        onClick={this.props.onPressGitMetrics}\r\n      >Click here to continue to GitHub metrics</button>\r\n    }\r\n\r\n    return (\r\n      <article>\r\n        <Helmet>\r\n          <title>Home Page</title>\r\n          <meta name=\"description\" content=\"The homepage of my app\" />\r\n        </Helmet>\r\n        <div className=\"Home-Page\">\r\n          <header className='Home-Page-header'>\r\n            <img\r\n              className=\"avatar\"\r\n              src={this.state.userAvatar ? this.state.userAvatar : \"https://user-images.githubusercontent.com/334891/29999089-2837c968-9009-11e7-92c1-6a7540a594d5.png\"}\r\n              alt=\"logo\"\r\n            />\r\n            <h1 className=\"App-title\">Welcome to Git Access {this.state.userName ? this.state.userName : 'Guest'}</h1>\r\n          </header>\r\n          <section className=\"centered\">\r\n            <h2>Here you can enter connect to the Github API</h2>\r\n            <p>This project was created using <i>React-Redux</i> for component creation on state management</p>\r\n          </section>\r\n          <section>\r\n            {button}\r\n          </section>\r\n        </div>\r\n      </article >\r\n    );\r\n  }\r\n}\r\n","import { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\n\r\nimport * as actions from './actions';\r\nimport HomePage from './HomePageComponent';\r\nimport { IStoreState } from '../../types/index';\r\n\r\n\r\nexport function mapStateToProps({ OAuthToken }: IStoreState) {\r\n    return {\r\n        //OAuthToken: OAuthToken\r\n    }\r\n}\r\n\r\nexport function mapDispatchToProps(dispatch: Dispatch<actions.HomePageActions>) {\r\n    return {\r\n        onPressGitSignIn: () => dispatch(actions.githubSignIn()),\r\n        onPressGitMetrics: () => dispatch(actions.githubMetrics()),\r\n        githubStoreAuth: (OAuthToken: string) => dispatch(actions.githubStoreAuth(OAuthToken))\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HomePage);","import * as React from 'react';\r\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\r\n\r\nimport HomePage from \"./containers/HomePage/HomePageContainer\";\r\n\r\nimport './App.css';\r\n\r\nconst Metrics = () => <h1>Metrics</h1>\r\nconst About = () => <h1>About</h1>\r\n\r\nconst App = () => (\r\n  <Router>\r\n    <div>\r\n      <Navigation />\r\n\r\n      <Route exact={true} path=\"/\" component={HomePage } />\r\n      <Route path=\"/metrics\" component={Metrics} />\r\n      <Route path=\"/about\" component={About} />\r\n    </div>\r\n  </Router>\r\n);\r\n\r\n\r\n\r\n\r\nconst Navigation = () => (\r\n  <ul>\r\n    <li>\r\n      <Link to=\"/\">Home</Link>\r\n    </li>\r\n    <li>\r\n      <Link to=\"/metrics\">Metrics</Link>\r\n    </li>\r\n    <li>\r\n      <Link to=\"/about\">About</Link>\r\n    </li>\r\n  </ul>\r\n);\r\n\r\n\r\nexport default App;\r\n","import * as React from 'react';\nimport { Action, createStore } from 'redux';\n\nimport * as ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport './index.css';\nimport registerServiceWorker from './registerServiceWorker';\n\nimport homeReducer  from './containers/HomePage/reducers';\nimport { IStoreState } from './types/index';\n\nimport App from './App'\n\n\nconst store = createStore<IStoreState, Action<any>, {}, {}>(homeReducer, {\n  OAuthToken: '',\n  currentUsername: undefined\n});\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root') as HTMLElement\n);\nregisterServiceWorker();\n"],"sourceRoot":""}